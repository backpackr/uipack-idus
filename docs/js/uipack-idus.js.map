{"version":3,"sources":["init.js","ui-selectbox.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"uipack-idus.js","sourcesContent":["(function (win) {\n    function defineBPackr() {\n        var uiPack = win.uiPack || {};\n\n        uiPack.events = {\n            events: {},\n            on: function (eventName, fn) {\n                this.events[eventName] = this.events[eventName] || [];\n                this.events[eventName].push(fn);\n            },\n            off: function (eventName, fn) {\n                var i;\n\n                if (this.events[eventName]) {\n                    for (i = 0; i < this.events[eventName].length; i++) {\n                        if (this.events[eventName][i] === fn) {\n                            this.events[eventName].splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            },\n            emit: function (eventName, data) {\n                if (this.events[eventName]) {\n                    this.events[eventName].forEach(function (fn) {\n                        fn(data);\n                    });\n                }\n            }\n        };\n\n        return uiPack;\n    }\n\n    // instanciate\n    if (typeof (uiPack) === 'undefined') {\n        win.uiPack = defineBPackr();\n    }\n}(window));","/*\n* [data-ui=\"selectbox\"] attributes\n*\n* data-state=\"disabled\"\n* data-select-placeholder=\"placeholder text\"\n*/\n\n(function ($, uiPack) {\n    var $ui = $('[data-ui=\"selectbox\"]');\n    var customEvent = 'propChange';\n\n    function toggleActive(e) {\n        var isDisabled = $(e.currentTarget).data('disabled') || $(e.currentTarget).data('state') === 'disabled';\n        var usePlaceholder = $(e.currentTarget).data('selectPlaceholder') !== undefined;\n        var selectedIndex = $(e.currentTarget).data('selectedIndex') || 0;\n        var $selected = $(e.currentTarget).find('.ui-selected');\n        var selectedText;\n\n        if (isDisabled) {\n            return;\n        }\n\n        // 열려있는 다른 셀렉트박스 닫기\n        $('[data-ui=\"selectbox\"]').not($(this)).removeClass('active');\n\n        // current selectbox toggle\n        $(e.currentTarget).toggleClass('active');\n\n        if (e.target.className === 'ui-option') {\n            selectedIndex = $(e.target).index();\n            selectedText = $(e.target).text();\n\n            // trigger change to hidden <select>\n            $(this).find('select')\n                .prop('selectedIndex', selectedIndex)\n                .trigger(customEvent).change();\n\n            // 플레이스 홀더 옵션\n            if (usePlaceholder) {\n                if (selectedIndex > 0) {\n                    $selected.text(selectedText);\n                    $selected.removeClass('placeholder');\n                } else {\n                    $selected.addClass('placeholder');\n                }\n            }\n\n            // remove tabindex in scrollbar: focus event interfearence;\n            if ($(this).find('[data-scrollbar]').length) {\n                $(this).find('[tabindex]').removeAttr('tabindex');\n            };\n        }\n    }\n\n    function handleCustomEvents(e) {\n        var selectedIndex = e.target.selectedIndex;\n        var disabled = e.target.disabled ? 'disabled' : '';\n        var $currentSS = $(e.target).closest('[data-ui=\"selectbox\"]');\n        var selectedOption = $currentSS.find('.ui-select').find('.ui-option').eq(selectedIndex).text();\n\n        $(e.target).closest('[data-ui=\"selectbox\"]')\n            .attr('data-state', disabled)\n            .data('state', disabled);\n\n        $(e.target).each(function () {\n            $(this).closest('[data-ui=\"selectbox\"]').find('.ui-option').eq(selectedIndex).text();\n        });\n\n        $currentSS.find('.ui-selected').text(selectedOption);\n    }\n\n    function init() {\n        $('[data-ui=\"selectbox\"]').each(function (i) {\n            var $selectForm = $(this).find('select');\n            var usePlaceholder = $(this).data('selectPlaceholder') !== undefined;\n            var hasScrollBar = $(this).find('[data-scrollbar]');\n            var $option;\n            var selectedIndex;\n\n            // add placeholder to selectbox\n            if (usePlaceholder) {\n                var $target = hasScrollBar.length ? $(this).find('.mCSB_container') : $(this).find('.ui-select');\n\n                $target.prepend('<li class=\"ui-option hide\" value=\"\">' + $(this).data('selectPlaceholder') + '</li>');\n            }\n\n            selectedIndex = $(this).find('.ui-option[selected]').length > 0 ? $(this).find('.ui-option[selected]').index() : 0;\n            $option = $(this).find('.ui-option');\n\n            // create <option> for select form\n            $option.each(function (i) {\n                var attributes = $(this).prop('attributes');\n\n                var $data = $('<option>');\n\n                $.each(attributes, function (i) {\n                    $data.attr(this.name, this.value);\n                });\n\n                $data.text($(this).text());\n                $selectForm.append($data);\n            });\n\n            // set <select> properties\n            $selectForm.prop({\n                'selectedIndex': selectedIndex,\n                'disabled': $(this).data('state') === 'disabled'\n            });\n\n            // initial placeholder\n            if ($(this).find('.ui-selected').text().length === 0 || selectedIndex > 0) {\n                $(this).find('.ui-selected').text($option.eq(selectedIndex).text());\n            }\n\n            if (selectedIndex === 0 && usePlaceholder) {\n                $(this).find('.ui-selected').addClass('placeholder');\n            }\n        });\n    }\n\n    if ($ui.length) {\n        init();\n        $ui.on('click', toggleActive);\n        // use custom event to avoid multiple change event on select;\n        $ui.find('select').on(customEvent, handleCustomEvents);\n    }\n\n    // init from other modules\n    uiPack.events.on('INIT_SELECTBOX', function () {\n        init();\n        $('[data-ui=\"selectbox\"]').on('click', toggleActive);\n        $('[data-ui=\"selectbox\"]').find('select').on(customEvent, handleCustomEvents);\n    });\n}(jQuery, uiPack));\n"]}